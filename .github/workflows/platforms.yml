name: All possible platforms

# TODO:
#
# 1. Publish the binary packages (if on main branch)
#    - https://github.com/FWDekker/mommy/blob/dev/.github/workflows/cd.yml
#    - also see the various Linux containers (Arch, Fedora...)
#
# 2. Extract this to a GitHub Action
#    - https://docs.github.com/en/actions/creating-actions/about-custom-actions
#    - https://damienaicheh.github.io/github/actions/2021/10/07/reuse-workflows-composite-action-en.html
#    - https://docs.github.com/en/actions/creating-actions/creating-a-javascript-action
#
# 3. Use it from a second pkgsrc-foo repo
#
# 4. Review the Action code, looking for anything I might ever need to update
#    - figure out how to be notified about updates
#      - Any actions I use have newer versions available
#      - Any actions I use give deprecation warnings (e.g., old NodeJS)
#      - Any actions I use support newer versions of existing guest platforms
#      - Any actions I use support additional guest platforms
#      - GitHub itself offers newer Ubuntu, macOS, or additional platforms
#
# 5. Turn my pkgsrc commit message into GitHub release notes
#
# 6. Add the Action to all my package repos
#    - and set it up for new repos in `pkgsrc-import-git`
#
# 7. Share with other pkgsrc developers

on:
  push:
    branches: [main]

jobs:
  build-all-packages:
    name: >
      ${{ matrix.os.uname }}
      ${{ matrix.os.version }}
      ${{ matrix.os.arch }}
    runs-on: ${{ matrix.os.host }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - uname: Alpine
            lname: alpine
            arch: x86_64
            version: '3.21'
            prefix: '/usr/pkg'
            host: ubuntu-latest
            guest: jirutka/setup-alpine@v1
            prep: gcc g++ procps coreutils gawk bash linux-headers git

          - uname: Alpine
            lname: alpine
            arch: x86
            version: '3.21'
            prefix: '/usr/pkg'
            host: ubuntu-latest
            guest: jirutka/setup-alpine@v1
            prep: gcc g++ procps coreutils gawk bash linux-headers git

          - uname: Alpine
            lname: alpine
            arch: armhf
            version: '3.21'
            prefix: '/usr/pkg'
            host: ubuntu-latest
            guest: jirutka/setup-alpine@v1
            prep: gcc g++ procps coreutils gawk bash linux-headers git

          - uname: Alpine
            lname: alpine
            arch: armv7
            version: '3.21'
            prefix: '/usr/pkg'
            host: ubuntu-latest
            guest: jirutka/setup-alpine@v1
            prep: gcc g++ procps coreutils gawk bash linux-headers git

          - uname: Alpine
            lname: alpine
            arch: aarch64
            version: '3.21'
            prefix: '/usr/pkg'
            host: ubuntu-latest
            guest: jirutka/setup-alpine@v1
            prep: gcc g++ procps coreutils gawk bash linux-headers git

          - uname: Alpine
            lname: alpine
            arch: ppc64le
            version: '3.21'
            prefix: '/usr/pkg'
            host: ubuntu-latest
            guest: jirutka/setup-alpine@v1
            prep: gcc g++ procps coreutils gawk bash linux-headers git

          - uname: Alpine
            lname: alpine
            arch: riscv64
            version: '3.21'
            prefix: '/usr/pkg'
            host: ubuntu-latest
            guest: jirutka/setup-alpine@v1
            prep: gcc g++ procps coreutils gawk bash linux-headers git

          - uname: Alpine
            lname: alpine
            arch: s390x
            version: '3.21'
            prefix: '/usr/pkg'
            host: ubuntu-latest
            guest: jirutka/setup-alpine@v1
            prep: gcc g++ procps coreutils gawk bash linux-headers git

          - uname: DragonFlyBSD
            lname: dragonflybsd
            arch: amd64
            version: '6.4.0'
            prefix: '/usr/pkg'
            host: ubuntu-latest
            guest: vmactions/dragonflybsd-vm@v1
            prep: pkg upgrade -y; pkg install -y git

          - uname: FreeBSD
            lname: freebsd
            arch: x86_64
            version: '14.2'
            prefix: '/usr/pkg'
            host: ubuntu-latest
            guest: vmactions/freebsd-vm@v1
            prep: pkg install -y git

          - uname: FreeBSD
            lname: freebsd
            arch: aarch64
            version: '14.2'
            prefix: '/usr/pkg'
            host: ubuntu-latest
            guest: vmactions/freebsd-vm@v1
            prep: pkg install -y git

          - uname: macOS
            lname: macos
            arch: arm64
            version: '15'
            prefix: '/opt/pkg'
            host: macOS-15
            guest: ''
            prep: ''

          - uname: macOS
            lname: macos
            arch: arm64
            version: '14'
            prefix: '/opt/pkg'
            host: macOS-14
            guest: ''
            prep: ''

          - uname: macOS
            lname: macos
            arch: amd64
            version: '13'
            prefix: '/opt/pkg'
            host: macOS-13
            guest: ''
            prep: ''

          - uname: NetBSD
            lname: netbsd
            arch: x86_64
            version: '10.1'
            prefix: '/usr/pkg'
            host: ubuntu-latest
            guest: vmactions/netbsd-vm@v1
            prep: /usr/sbin/pkg_add git-base

          - uname: NetBSD
            lname: netbsd
            arch: aarch64
            version: '10.1'
            prefix: '/usr/pkg'
            host: ubuntu-latest
            guest: vmactions/netbsd-vm@v1
            prep: /usr/sbin/pkg_add git-base

          - uname: OmniOS
            lname: omnios
            arch: amd64
            version: 'r151052'
            prefix: '/opt/local'
            host: ubuntu-latest
            guest: vmactions/omnios-vm@v1
            prep: pkg install developer/versioning/git developer/gcc10 system/header developer/build/make

          - uname: OpenBSD
            lname: openbsd
            arch: x86_64
            version: '7.6'
            prefix: '/usr/pkg'
            host: ubuntu-latest
            guest: vmactions/openbsd-vm@v1
            prep: pkg_add git

          - uname: OpenBSD
            lname: openbsd
            arch: aarch64
            version: '7.6'
            prefix: '/usr/pkg'
            host: ubuntu-latest
            guest: vmactions/openbsd-vm@v1
            prep: pkg_add git

          - uname: Solaris
            lname: solaris
            arch: amd64
            version: '11.4'
            prefix: '/usr/pkg'
            host: ubuntu-latest
            guest: vmactions/solaris-vm@v1
            prep: pkgutil -y -i git

          - uname: Ubuntu
            lname: ubuntu
            arch: amd64
            version: '24.04'
            prefix: '/usr/pkg'
            host: ubuntu-24.04
            guest: ''
            prep: ''

          - uname: Ubuntu
            lname: ubuntu
            arch: amd64
            version: '22.04'
            prefix: '/usr/pkg'
            host: ubuntu-22.04
            guest: ''
            prep: ''

          - uname: Ubuntu
            lname: ubuntu
            arch: amd64
            version: '20.04'
            prefix: '/usr/pkg'
            host: ubuntu-20.04
            guest: ''
            prep: ''
    steps:
    - name: Checkout
      id: bootstrap-checkout
      uses: actions/checkout@v4
      with:
        path: move-under-pkgsrc-once-you-have-pkgsrc

    - name: Map pkgsrc prefix to cache location
      id: bootstrap-cache-path-map
      run: |
        CACHE_PREFIX=$(echo ${{ matrix.os.prefix }} | sed -e 's|/|-|g')
        echo "CACHE_PREFIX=${CACHE_PREFIX}" >> "$GITHUB_ENV"

    - name: Restore bootstrap
      id: bootstrap-restore
      uses: actions/cache/restore@v4
      with:
        path: ${{ github.workspace }}/cached-${{ matrix.os.lname }}-${{ matrix.os.version }}-${{ matrix.os.arch }}${{ env.CACHE_PREFIX }}
        key: ${{ matrix.os.lname }}-${{ matrix.os.version }}-${{ matrix.os.arch }}${{ env.CACHE_PREFIX }}-bootstrap-${{ github.run_id }}
        restore-keys: ${{ matrix.os.lname }}-${{ matrix.os.version }}-${{ matrix.os.arch }}${{ env.CACHE_PREFIX }}-bootstrap-

    - name: Build (alpine prep)
      if: ${{ startsWith(matrix.os.guest, 'jirutka/') }}
      id: bootstrap-build-alpine-prep
      uses: jirutka/setup-alpine@v1
      with:
        branch: ${{ (matrix.os.version == 'edge') && 'edge' || format('v{0}', matrix.os.version) }}
        arch: ${{ matrix.os.arch }}
        packages: ${{ matrix.os.prep }}
    - name: Build (alpine)
      if: ${{ startsWith(matrix.os.guest, 'jirutka/') }}
      id: bootstrap-build-alpine
      shell: alpine.sh --root {0}
      run: |
        set -e; git clone --verbose --depth=1 ${GITHUB_SERVER_URL}/NetBSD/pkgsrc; mkdir -p pkgsrc/schmonz; mv move-under-pkgsrc-once-you-have-pkgsrc pkgsrc/${GITHUB_REPOSITORY}; env SH=/bin/bash ./pkgsrc/${GITHUB_REPOSITORY}/.github/workflows/build.sh ${{ matrix.os.lname }} ${{ matrix.os.version }} ${{ matrix.os.arch }} ${{ matrix.os.prefix }}; [ -f ${{ matrix.os.prefix }}/etc/mk.conf ] && echo BOOTSTRAP_COMPLETED=yes >> ${GITHUB_ENV}; rm -rf pkgsrc

    - name: Build (vmactions)
      if: ${{ startsWith(matrix.os.guest, 'vmactions/') }}
      id: bootstrap-build-vmactions
      uses: jenseng/dynamic-uses@v1
      with:
        uses: ${{ matrix.os.guest }}
        with: |
          {
            "release": "${{ (matrix.os.uname == 'Solaris') && format('{0}-gcc', matrix.os.version) || matrix.os.version }}",
            "arch": "${{ (matrix.os.arch == 'aarch64') && 'aarch64' || 'x86_64' }}",
            "usesh": true,
            "sync": "rsync",
            "prepare": "set -e; ${{ matrix.os.prep }}",
            "run": "set -e; git clone --verbose --depth=1 ${GITHUB_SERVER_URL}/NetBSD/pkgsrc; mkdir -p pkgsrc/schmonz; mv move-under-pkgsrc-once-you-have-pkgsrc pkgsrc/${GITHUB_REPOSITORY}; ./pkgsrc/${GITHUB_REPOSITORY}/.github/workflows/build.sh ${{ matrix.os.lname }} ${{ matrix.os.version }} ${{ matrix.os.arch }} ${{ matrix.os.prefix }}; [ -f ${{ matrix.os.prefix }}/etc/mk.conf ] && echo BOOTSTRAP_COMPLETED=yes >> ${GITHUB_ENV}; rm -rf pkgsrc"
          }

    - name: Build (native)
      if: ${{ ! startsWith(matrix.os.guest, 'jirutka/') && ! startsWith(matrix.os.guest, 'vmactions/') }}
      id: bootstrap-build-native
      run: |
        set -e; ${{ matrix.os.prep }}
        set -e; git clone --verbose --depth=1 ${GITHUB_SERVER_URL}/NetBSD/pkgsrc; mkdir -p pkgsrc/schmonz; mv move-under-pkgsrc-once-you-have-pkgsrc pkgsrc/${GITHUB_REPOSITORY}; sudo env GITHUB_REPOSITORY=${GITHUB_REPOSITORY} GITHUB_ENV=${GITHUB_ENV} ./pkgsrc/${GITHUB_REPOSITORY}/.github/workflows/build.sh ${{ matrix.os.lname }} ${{ matrix.os.version }} ${{ matrix.os.arch }} ${{ matrix.os.prefix }}; [ -f ${{ matrix.os.prefix }}/etc/mk.conf ] && echo BOOTSTRAP_COMPLETED=yes >> ${GITHUB_ENV}; sudo rm -rf pkgsrc

    - name: Save bootstrap
      id: bootstrap-save
      uses: actions/cache/save@v4
      if: ${{ startsWith(env.BOOTSTRAP_COMPLETED, 'yes') }}
      with:
        path: ${{ github.workspace }}/cached-${{ matrix.os.lname }}-${{ matrix.os.version }}-${{ matrix.os.arch }}${{ env.CACHE_PREFIX }}
        key: ${{ steps.bootstrap-restore.outputs.cache-primary-key }}

    - name: Upload built packages
      id: upload-built-packages
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os.uname }}-${{ matrix.os.version }}-${{ matrix.os.arch }}
        path: ${{ env.release_asset }}
        compression-level: '0'
        overwrite: 'false'
        if-no-files-found: 'error'

  publish-all-packages:
    if: always()
    needs: [ build-all-packages ]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout again
      id: publish-checkout
      uses: actions/checkout@v4

    - name: Download built packages
      id: publish-download-built-packages
      uses: actions/download-artifact@v5
      with:
        path: release-contents
        merge-multiple: true

    - name: Debug which packages were downloaded
      id: publish-debug-downloaded-packages
      run: ls release-contents

    - name: Create tag
      id: publish-create-tag
      run: |
        pkgversion="$(echo release-contents/*.tgz | head -1 | sed -e 's|^.*-||' -e 's|\.tgz$||')"
        echo "SCHMONZ: publish-create-tag 1: pkgversion = ${pkgversion}"
        ghversion="gh$(date -u '+%Y%m%d-%H%M%S')"
        echo "SCHMONZ: publish-create-tag 2: ghversion = ${ghversion}"
        release_version="${pkgversion}.${ghversion}"
        echo "SCHMONZ: publish-create-tag 3: release_version = ${release_version}"
        echo release_version="${release_version}" >> "${GITHUB_ENV}"
        git config user.name "Amitai Schleier"
        git config user.email "schmonz-web-git@schmonz.com"
        git tag -a "${release_version}" -m "Version ${release_version}."

    - name: Push tag
      id: publish-push-tag
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        push_only_tags: true
        force: true

    - name: Publish packages
      id: publish-packages
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.release_version }}
        target_commitish: main
        draft: false
        prerelease: false
        files: 'release-contents/*.tgz'
        fail_on_unmatched_files: true
