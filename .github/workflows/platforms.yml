name: VM

# TODO:
#
# 3. Iterate over all available versions of guest platforms
#    - possible to use matrix more effectively?
#      - e.g. one Alpine with arch: [foo, bar, baz]
#
# 4. If branch == main, publish all the binary packages
#    - pkgsrc commit message with the changelog -> GitHub release notes
#    - borrow from <https://github.com/FWDekker/mommy/blob/dev/.github/workflows/cd.yml>
#
# 5. if sshfs can be reliable and fast on all platforms, clone pkgsrc only 1x (on the host)
#    - else try one more time to actions/cache pkgsrc on the host
#
# 6. Review the code, looking for anything I might ever need to update
#    - figure out how to be notified about updates
#      - Any actions I use have newer versions available
#      - Any actions I use give deprecation warnings (e.g., old NodeJS)
#      - Any actions I use support newer versions of existing guest platforms
#      - Any actions I use support additional guest platforms
#      - GitHub itself offers newer Ubuntu, macOS, or additional platforms
#
# 7. Publish this as a GitHub Action!
#
# 8. Use it in all my package repos
#
# 9. Tell other pkgsrc developers about it

on:
  push:
    branches: [main]

jobs:
  build-all-packages:
    name: >
      ${{ matrix.os.uname }}
      ${{ matrix.os.arch }}
      ${{ matrix.os.abi }}
      ${{ matrix.os.version }}
    runs-on: ${{ matrix.os.host }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - uname: Alpine
            lname: alpine
            arch: x86_64
            abi: default
            version: 'edge'
            host: ubuntu-latest
            guest: jirutka/setup-alpine@v1
            prep: gcc g++ procps coreutils gawk bash linux-headers git

          - uname: Alpine
            lname: alpine
            arch: x86
            abi: 32
            version: 'edge'
            host: ubuntu-latest
            guest: jirutka/setup-alpine@v1
            prep: gcc g++ procps coreutils gawk bash linux-headers git

          - uname: Alpine
            lname: alpine
            arch: armhf
            abi: default
            version: 'edge'
            host: ubuntu-latest
            guest: jirutka/setup-alpine@v1
            prep: gcc g++ procps coreutils gawk bash linux-headers git

          - uname: Alpine
            lname: alpine
            arch: armv7
            abi: default
            version: 'edge'
            host: ubuntu-latest
            guest: jirutka/setup-alpine@v1
            prep: gcc g++ procps coreutils gawk bash linux-headers git

          - uname: Alpine
            lname: alpine
            arch: aarch64
            abi: default
            version: 'edge'
            host: ubuntu-latest
            guest: jirutka/setup-alpine@v1
            prep: gcc g++ procps coreutils gawk bash linux-headers git

          - uname: Alpine
            lname: alpine
            arch: ppc64le
            abi: default
            version: 'edge'
            host: ubuntu-latest
            guest: jirutka/setup-alpine@v1
            prep: gcc g++ procps coreutils gawk bash linux-headers git

          - uname: Alpine
            lname: alpine
            arch: riscv64
            abi: default
            version: 'edge'
            host: ubuntu-latest
            guest: jirutka/setup-alpine@v1
            prep: gcc g++ procps coreutils gawk bash linux-headers git

          - uname: Alpine
            lname: alpine
            arch: s390x
            abi: default
            version: 'edge'
            host: ubuntu-latest
            guest: jirutka/setup-alpine@v1
            prep: gcc g++ procps coreutils gawk bash linux-headers git

          - uname: DragonFlyBSD
            lname: dragonflybsd
            arch: amd64
            abi: default
            version: '6.4.0'
            host: ubuntu-latest
            guest: vmactions/dragonflybsd-vm@v1
            prep: pkg upgrade -y; pkg install -y git

          - uname: FreeBSD
            lname: freebsd
            arch: amd64
            abi: default
            version: '14.0'
            host: ubuntu-latest
            guest: vmactions/freebsd-vm@v1
            prep: pkg install -y git

          - uname: FreeBSD
            lname: freebsd
            arch: arm64
            abi: default
            version: '13.2'
            host: macos-14
            guest: cross-platform-actions/action@v0.22.0
            prep: sudo pkg install -y git

          - uname: macOS
            lname: macos
            arch: arm64
            abi: default
            version: '14'
            host: macos-14
            guest: 
            prep: 

          - uname: macOS
            lname: macos
            arch: amd64
            abi: default
            version: '13'
            host: macos-13
            guest: 
            prep: 

          - uname: macOS
            lname: macos
            arch: amd64
            abi: default
            version: '12'
            host: macos-12
            guest: 
            prep: 

          - uname: macOS
            lname: macos
            arch: amd64
            abi: default
            version: '11'
            host: macos-11
            guest: 
            prep: 

          - uname: NetBSD
            lname: netbsd
            arch: amd64
            abi: default
            version: '9.3'
            host: ubuntu-latest
            guest: vmactions/netbsd-vm@v1
            prep: /usr/sbin/pkg_add git-base

          - uname: OmniOS
            lname: omnios
            arch: amd64
            abi: default
            version: 'r151048'
            host: ubuntu-latest
            guest: vmactions/omnios-vm@v1
            prep: pkg install developer/versioning/git developer/gcc10 system/header developer/build/make

          - uname: OpenBSD
            lname: openbsd
            arch: amd64
            abi: default
            version: '7.4'
            host: ubuntu-latest
            guest: vmactions/openbsd-vm@v1
            prep: pkg_add git

          - uname: OpenBSD
            lname: openbsd
            arch: arm64
            abi: default
            version: '7.4'
            host: macos-14
            guest: cross-platform-actions/action@v0.22.0
            prep: sudo pkg_add git

          - uname: Solaris
            lname: solaris
            arch: amd64
            abi: default
            version: '11.4-gcc' # XXX include compiler in all package filenames, but not specially here
            host: ubuntu-latest
            guest: vmactions/solaris-vm@v1
            prep: pkgutil -y -i git

          - uname: Ubuntu
            lname: ubuntu
            arch: amd64
            abi: default
            version: '22.04'
            host: ubuntu-22.04
            guest: 
            prep: 

          - uname: Ubuntu
            lname: ubuntu
            arch: amd64
            abi: default
            version: '20.04'
            host: ubuntu-20.04
            guest: 
            prep: 
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: move-under-pkgsrc-once-you-have-pkgsrc

    - name: Restore bootstrap
      id: bootstrap-restore
      uses: actions/cache/restore@v4
      with:
        path: ${{ github.workspace }}/cached-${{ matrix.os.lname }}-${{ matrix.os.arch }}-${{ matrix.os.abi }}-${{ matrix.os.version }}-opt-pkg
        key: ${{ matrix.os.lname }}-${{ matrix.os.arch }}-${{ matrix.os.abi }}-${{ matrix.os.version }}-bootstrap-${{ github.run_id }}
        restore-keys: ${{ matrix.os.lname }}-${{ matrix.os.arch }}-${{ matrix.os.abi }}-${{ matrix.os.version }}-bootstrap-

    - name: Build (alpine prep)
      if: ${{ startsWith(matrix.os.guest, 'jirutka/') }}
      id: bootstrap-build-alpine-prep
      uses: jirutka/setup-alpine@v1
      with:
        branch: ${{ matrix.os.version }}
        arch: ${{ matrix.os.arch }}
        packages: ${{ matrix.os.prep }}
    - name: Build (alpine)
      if: ${{ startsWith(matrix.os.guest, 'jirutka/') }}
      id: bootstrap-build-alpine
      shell: alpine.sh --root {0}
      run: |
        set -e; git clone --verbose --depth=1 ${GITHUB_SERVER_URL}/NetBSD/pkgsrc; mkdir -p pkgsrc/schmonz; mv move-under-pkgsrc-once-you-have-pkgsrc pkgsrc/${GITHUB_REPOSITORY}; env SH=/bin/bash ./pkgsrc/${GITHUB_REPOSITORY}/.github/workflows/build.sh ${{ matrix.os.lname }} ${{ matrix.os.arch }} ${{ matrix.os.abi }} ${{ matrix.os.version }}

    - name: Build (cross-platform-actions)
      if: ${{ startsWith(matrix.os.guest, 'cross-platform-actions/') }}
      id: bootstrap-build-cross-platform-actions
      uses: jenseng/dynamic-uses@v1
      with:
        uses: ${{ matrix.os.guest }}
        with: |
          {
            "operating_system": "${{ matrix.os.lname }}",
            "architecture": "${{ matrix.os.arch }}",
            "version": "${{ matrix.os.version }}",
            "shell": "sh",
            "run": "set -e; ${{ matrix.os.prep }}; git clone --verbose --depth=1 ${GITHUB_SERVER_URL}/NetBSD/pkgsrc; mkdir -p pkgsrc/schmonz; mv move-under-pkgsrc-once-you-have-pkgsrc pkgsrc/${GITHUB_REPOSITORY}; sudo env GITHUB_REPOSITORY=${GITHUB_REPOSITORY} GITHUB_ENV=${GITHUB_ENV} ./pkgsrc/${GITHUB_REPOSITORY}/.github/workflows/build.sh ${{ matrix.os.lname }} ${{ matrix.os.arch }} ${{ matrix.os.abi }} ${{ matrix.os.version }}"
          }

    - name: Build (vmactions)
      if: ${{ startsWith(matrix.os.guest, 'vmactions/') }}
      id: bootstrap-build-vmactions
      uses: jenseng/dynamic-uses@v1
      with:
        uses: ${{ matrix.os.guest }}
        with: |
          {
            "release": "${{ matrix.os.version }}",
            "usesh": true,
            "sync": "rsync",
            "prepare": "set -e; ${{ matrix.os.prep }}",
            "run": "set -e; mkdir -p $(dirname ${GITHUB_ENV}); git clone --verbose --depth=1 ${GITHUB_SERVER_URL}/NetBSD/pkgsrc; mkdir -p pkgsrc/schmonz; mv move-under-pkgsrc-once-you-have-pkgsrc pkgsrc/${GITHUB_REPOSITORY}; ./pkgsrc/${GITHUB_REPOSITORY}/.github/workflows/build.sh ${{ matrix.os.lname }} ${{ matrix.os.arch }} ${{ matrix.os.abi }} ${{ matrix.os.version }}"
          }

    - name: Build (native)
      if: ${{ ! startsWith(matrix.os.guest, 'jirutka/') && ! startsWith(matrix.os.guest, 'cross-platform-actions/') && ! startsWith(matrix.os.guest, 'vmactions/') }}
      id: bootstrap-build-native
      run:
        set -e; ${{ matrix.os.prep }}
        set -e; git clone --verbose --depth=1 ${GITHUB_SERVER_URL}/NetBSD/pkgsrc; mkdir -p pkgsrc/schmonz; mv move-under-pkgsrc-once-you-have-pkgsrc pkgsrc/${GITHUB_REPOSITORY}; sudo env GITHUB_REPOSITORY=${GITHUB_REPOSITORY} GITHUB_ENV=${GITHUB_ENV} ./pkgsrc/${GITHUB_REPOSITORY}/.github/workflows/build.sh ${{ matrix.os.lname }} ${{ matrix.os.arch }} ${{ matrix.os.abi }} ${{ matrix.os.version }}

    - name: Save bootstrap
      id: bootstrap-save
      uses: actions/cache/save@v4
      if: always()
      with:
        path: ${{ github.workspace }}/cached-${{ matrix.os.lname }}-${{ matrix.os.arch }}-${{ matrix.os.abi }}-${{ matrix.os.version }}-opt-pkg
        key: ${{ steps.bootstrap-restore.outputs.cache-primary-key }}

    - name: Pretend to publish package
      run: |
        set -e
        echo "VERSION: version ${{ env.release_version }}"
        echo "FILE: ${{ env.release_asset }}"

