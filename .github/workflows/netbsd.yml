name: VM

# TODO:
#
# 1. Set bootstrap prefix to match available binary package repos,
#    or else the default for the platform
#    - mostly /usr/pkg (and /usr/pkg/pkgdb)
#    - macOS: /opt/pkg to avoid SIP and match pkgsrc.smartos.org
#    - SmartOS: what's the default in their repos?
#
# 2. Include compiler, prefix, and ABI in the publishable filenames
#    - And anything else my self-hosted VMs would cook into ${PACKAGES}
#
# 3. Add non-x86 BSD platforms via cross-platform-actions
#    - File an issue requesting NetBSD 10 aarch64
#
# 4. Add native builds for Ubuntu, macOS
#
# 5. If branch == main, publish all the binary packages
#    - pkgsrc commit message with the changelog -> GitHub release notes
#
# 6. if sshfs can be reliable and fast on all platforms, clone pkgsrc only 1x (on the host)
#    - else try one more time to actions/cache pkgsrc on the host
#
# 7. Publish this as a GitHub Action!
#
# 8. Use it in all my package repos
#
# 9. Tell other pkgsrc developers about it

on:
  push:
    branches: [main]

jobs:
  build-all-vmactions:
    name: >
      ${{ matrix.os.uname }}
      ${{ matrix.os.arch }}
      ${{ matrix.os.version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os:
          - uname: DragonFlyBSD
            lname: dragonflybsd
            arch: amd64
            version: '6.4.0'
            prep: pkg upgrade -y; pkg install -y git
          - uname: FreeBSD
            lname: freebsd
            arch: amd64
            version: '14.0'
            prep: pkg install -y git
          - uname: NetBSD
            lname: netbsd
            arch: amd64
            version: '9.3'
            prep: /usr/sbin/pkg_add git-base
          - uname: OmniOS
            lname: omnios
            arch: amd64
            version: 'r151048'
            prep: pkg install developer/versioning/git developer/gcc10 system/header developer/build/make
          - uname: OpenBSD
            lname: openbsd
            arch: amd64
            version: '7.4'
            prep: pkg_add git
          - uname: Solaris
            lname: solaris
            arch: amd64
            version: '11.4-gcc' # XXX include compiler in all package filenames, but not specially here
            prep: pkgutil -y -i git
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: move-under-pkgsrc-once-you-have-pkgsrc

    - name: Restore bootstrap
      id: bootstrap-restore
      uses: actions/cache/restore@v4
      with:
        path: ${{ github.workspace }}/cached-${{ matrix.os.lname }}-${{ matrix.os.arch }}-${{ matrix.os.version }}-opt-pkg
        key: ${{ matrix.os.lname }}-${{ matrix.os.arch }}-${{ matrix.os.version }}-bootstrap-${{ github.run_id }}
        restore-keys: ${{ matrix.os.lname }}-${{ matrix.os.arch }}-${{ matrix.os.version }}-bootstrap-

    - name: Build bootstrap and packages
      id: bootstrap-build
      uses: jenseng/dynamic-uses@v1
      with:
        uses: vmactions/${{ matrix.os.lname }}-vm@v1
        with: |
          {
            "release": "${{ matrix.os.version }}",
            "usesh": true,
            "sync": "rsync",
            "prepare": "set -e; ${{ matrix.os.prep }}",
            "run": "set -e; mkdir -p $(dirname ${GITHUB_ENV}); git clone --verbose --depth=1 ${GITHUB_SERVER_URL}/NetBSD/pkgsrc; mkdir -p pkgsrc/schmonz; mv move-under-pkgsrc-once-you-have-pkgsrc pkgsrc/${GITHUB_REPOSITORY}; ./pkgsrc/${GITHUB_REPOSITORY}/.github/workflows/bootstrap-and-build.sh ${{ matrix.os.lname }} ${{ matrix.os.arch }} ${{ matrix.os.version }}"
          }

    - name: Save bootstrap
      id: bootstrap-save
      uses: actions/cache/save@v4
      if: always()
      with:
        path: ${{ github.workspace }}/cached-${{ matrix.os.lname }}-${{ matrix.os.arch }}-${{ matrix.os.version }}-opt-pkg
        key: ${{ steps.bootstrap-restore.outputs.cache-primary-key }}

    - name: Pretend to publish package
      run: |
        set -e
        echo "VERSION: version ${{ env.release_version }}"
        echo "FILE: ${{ env.release_asset }}"

  publish-all-packages:
    needs: [ build-all-vmactions ]
    runs-on: ubuntu-latest
    steps:
    - name: Pretend to publish all binary packages
      run: |
        set -e
        ls release-contents/*.tgz

    - name: Publish package
      uses: softprops/action-gh-release@v1
      if: false
      with:
        files: ${{ env.release_asset }}
        name: ${{ env.release_version }}
